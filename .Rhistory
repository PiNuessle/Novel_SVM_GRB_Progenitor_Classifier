# colnames(temp_Goldstein_S3_Data)<-c("Name", "Peak_E_over_Flu", "t90",  "Peak_E", "Fluence", "AG_fluence", "Classification.")
write.csv(no_NA_Goldstein_S3_Data, file.path(path, "Goldstein_AG_Full_DataSet_W_Name.csv"))
#now let's try it on the overlapping sample with redshifts
Goldstein_S6_Data <- read_excel(file.path(path, "Goldstein_Sample_6_Data.xlsx"), col_types = c("skip", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
missing<-which(!complete.cases(Goldstein_S6_Data))
no_NA_Goldstein_S6_Data<- Goldstein_S6_Data[-missing, ]
collapsar_mask<-no_NA_Goldstein_S6_Data$Name %in% Collapsars
merger_mask<-no_NA_Goldstein_S6_Data$Name %in% Mergers
Classification<-rep("Unknown", nrow(no_NA_Goldstein_S6_Data))
Classification[collapsar_mask]<-"collapsar"
Classification[merger_mask]<-"merger"
temp_Goldstein_S6_Data<-data.frame(cbind(no_NA_Goldstein_S6_Data$Name, log10(no_NA_Goldstein_S6_Data$`Peak E. over Flue.`),  log10(no_NA_Goldstein_S6_Data$E_P_Over_S_Err), log10(no_NA_Goldstein_S6_Data$t90), log10(no_NA_Goldstein_S6_Data$t90_err), log10(no_NA_Goldstein_S6_Data$Peak_E), log10(no_NA_Goldstein_S6_Data$Peak_E_Err), log10(no_NA_Goldstein_S6_Data$Fluence), log10(no_NA_Goldstein_S6_Data$Fluence_Err), Classification, no_NA_Goldstein_S6_Data$Redshift))
colnames(temp_Goldstein_S6_Data)<-c("Name", "Peak_E_over_Flu", "E_P_Over_S_Err", "t90", "t90_err", "Peak_E", "Peak_E_Err", "Fluence", "Fluence_Err", "Classification.", "Redshift")
write.csv(temp_Goldstein_S6_Data, file.path(path, "Goldstein_Redshift_AG_Full_DataSet_W_Name.csv"))
# new_Goldstein_S6_Data<-data.frame(cbind(log10(no_NA_Goldstein_S6_Data$`Peak E. over Flue.`), log10(no_NA_Goldstein_S6_Data$t90), as.factor(Classification)))
# colnames(new_Goldstein_S6_Data)<-c("Peak_E_over_Flu", "t90", "as.factor.Classification.")
# unknown_remover<-which(new_Goldstein_S6_Data$as.factor.Classification.==3)
# Second_predicted_svm<-predict(svmfit, new_Goldstein_S6_Data)
# plot(new_Goldstein_S6_Data$Peak_E_over_Flu~new_Goldstein_S6_Data$t90, ylab=expression(E[p]/S[prompt]~' 10kev-10MeV ('~erg ~ cm^{2} ~ erg^{-1} ~ ', GBM)'), xlab='t90 (s, GBM)', col=Second_predicted_svm, pch=20)
# svm_check=predict(svmfit, new_Goldstein_S6_Data[-unknown_remover, ])
# confusionMatrix(svm_check, factor(new_Goldstein_S6_Data[-unknown_remover, ]$as.factor.Classification.), dnn = c("Prediction", "Reference"))
Goldstein_S2_Data <- read_excel(file.path(path, "Goldstein_Sample_2_Data.xlsx"), col_types = c("skip", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")) [-c(3), ]
#don't import stuff we won't need right now
par(mar=c(5,5,5,5))
collapsar_mask=Goldstein_S2_Data$Name %in% Collapsars
merger_mask=Goldstein_S2_Data$Name %in% Mergers
Goldstein_S2_collapsars=Goldstein_S2_Data[collapsar_mask, ]
Goldstein_S2_mergers=Goldstein_S2_Data[merger_mask, ]
Goldstein_S2_unknown=Goldstein_S2_Data[!c(collapsar_mask+merger_mask), ]
long_mask=which(Goldstein_S2_unknown$t90>4.2)
short_mask=which(Goldstein_S2_unknown$t90<=4.2)
Goldstein_S2_Long=Goldstein_S2_unknown[long_mask, ]
Goldstein_S2_Short=Goldstein_S2_unknown[short_mask, ]
# plot(Goldstein_S2_Long$t90, Goldstein_S2_Long$`Peak E. over Flue.`, pch=20, ylab=expression(E[p]/S[prompt]~' 10kev-10MeV ('~erg ~ cm^{2} ~ erg^{-1} ~ ', GBM)'), xlab='t90 (s, GBM)', log="xy", xlim=c(1e-2, 1e3))
# points(Goldstein_S2_Short$t90, Goldstein_S2_Short$`Peak E. over Flue.`, pch=20, col='grey')
# points(Goldstein_S2_mergers$t90, Goldstein_S2_mergers$`Peak E. over Flue.`, pch=4, col='red')
# points(Goldstein_S2_collapsars$t90, Goldstein_S2_collapsars$`Peak E. over Flue.`, pch=8, col='blue')
# legend("topleft",
#        legend = c('Unknown Long', 'Unknown Short', "Mergers", 'Collapsars'),
#        col = c('black', 'grey', 'red', 'blue'),
#        pch = c(20, 20, 4, 8))
ggplot(Goldstein_S2_Long, aes(x = t90, y = `Peak E. over Flue.`, colour = runif(1, 0, 1)))+geom_point(size = 1)+ylab(expression(E[p]/S[prompt]~' 10kev-10MeV ('~keV ~ cm^{2} ~ erg^{-1} ~ ', GBM)'))+xlab('t90 (s, GBM)')+geom_point(data = Goldstein_S2_Short, color = "grey")+scale_colour_gradient2(low = "black",mid ="black", high = "black",  midpoint = 0.5, name="Burst Types")+geom_point(data = Goldstein_S2_mergers, pch=4, color = "red")+geom_point(data = Goldstein_S2_collapsars, pch=8, color ='blue')+scale_y_log10(labels = trans_format("log10", math_format(10^.x)))+scale_x_log10(labels = trans_format("log10", math_format(10^.x)))
plot(NULL ,xaxt='n',yaxt='n',bty='n',ylab='',xlab='', xlim=0:1, ylim=0:1)
legend("topleft", title='Burst Types', legend = c('Unknown Long', 'Unknown Short', "Mergers", 'Collapsars'), col = c('black', 'grey', 'red', 'blue'), pch = c(20, 20, 4, 8))
##
missing<-which(!complete.cases(Goldstein_S2_Data))
no_NA_Goldstein_S2_Data<- Goldstein_S2_Data[-missing, ]
collapsar_mask<-no_NA_Goldstein_S2_Data$Name %in% Collapsars
merger_mask<-no_NA_Goldstein_S2_Data$Name %in% Mergers
# short_list<-which(no_NA_Goldstein_S2_Data$t90<4.2)
# long_list<-which(no_NA_Goldstein_S2_Data$t90>4.2)
Classification<-rep("Unknown", nrow(no_NA_Goldstein_S2_Data))
# Classification[short_list]<-"merger"
# Classification[long_list]<-"collapsar"
Classification[collapsar_mask]<-"collapsar"
Classification[merger_mask]<-"merger"
temp_Goldstein_S2_Data<-data.frame(cbind(no_NA_Goldstein_S2_Data$Name, log10(no_NA_Goldstein_S2_Data$`Peak E. over Flue.`), log10(no_NA_Goldstein_S2_Data$E_P_Over_S_Err), log10(no_NA_Goldstein_S2_Data$t90), log10(no_NA_Goldstein_S2_Data$t90_err), log10(no_NA_Goldstein_S2_Data$Peak_E), log10(no_NA_Goldstein_S2_Data$Peak_E_Err), log10(no_NA_Goldstein_S2_Data$Fluence), log10(no_NA_Goldstein_S2_Data$Fluence_Err), Classification))
colnames(temp_Goldstein_S2_Data)<-c("Name", "Peak_E_over_Flu", "E_P_Over_S_Err", "t90", "t90_err", "Peak_E", "Peak_E_Err", "Fluence", "Fluence_Err", "Classification.")
write.csv(temp_Goldstein_S2_Data, file.path(path, "Goldstein_Full_DataSet_W_Name.csv"))
new_Goldstein_S2_Data<-data.frame(cbind(log10(no_NA_Goldstein_S2_Data$`Peak E. over Flue.`), log10(no_NA_Goldstein_S2_Data$t90), as.factor(Classification)))
colnames(new_Goldstein_S2_Data)<-c("Peak_E_over_Flu", "t90", "as.factor.Classification.")
# model <- randomForest(formula = no_NA_H_2b_Data$Classification ~ ., data = no_NA_H_2b_Data)
unknown_remover<-which(new_Goldstein_S2_Data$as.factor.Classification.==3)
merger_mask<-which(new_Goldstein_S2_Data$as.factor.Classification.==2)
collapsar_mask<-which(new_Goldstein_S2_Data$as.factor.Classification.==1)
training_set=new_Goldstein_S2_Data[-unknown_remover, ]
svmfit<-svm(training_set$as.factor.Classification. ~ ., data = training_set, type = "C-classification", cost = 1.0, kernel = "sigmoid", probability=TRUE)
training_set_2<-data.frame(training_set)
colnames(training_set_2)<-c("Peak_E_over_Flu", "t90", "Classification.")
write.csv(training_set_2, file.path(path, "Goldstein_Training_Set.csv"))
print(svmfit)
plot(svmfit, training_set, Peak_E_over_Flu~t90, ylab=expression(E[p]/S[prompt]~' 10kev-10MeV ('~erg ~ cm^{2} ~ erg^{-1} ~ ', GBM)'), xlab='t90 (s, GBM)', log="xy")
# points(log10(Goldstein_S2_unknown$t90), log10(Goldstein_S2_unknown$`Peak E. over Flue.`))
predicted_svm<-predict(svmfit, new_Goldstein_S2_Data[unknown_remover, ], probability=TRUE)
new_table<-attr(predicted_svm, "probabilities")
new_table<-cbind(no_NA_Goldstein_S2_Data$Name, no_NA_Goldstein_S2_Data$t90, no_NA_Goldstein_S2_Data$`Peak E. over Flue.`, new_table)
colnames(new_table)<-c("Name", "t90", "E_P_Over_S", "P_collapsar", "P_merger")
new_table<-data.frame(new_table)
write.csv(new_table, file.path(path, "Goldstein_Classification.csv"))
colnames(Goldstein_S2_collapsars)<-c("Name", "Peak_E_over_Flu", "E_P_Over_S_Err", "`Hardness Ratio`", "t90", "t90_err")
new_Goldstein_S2_Data<-new_Goldstein_S2_Data;
new_Goldstein_S2_Data$Peak_E_over_Flu<-10^(new_Goldstein_S2_Data$Peak_E_over_Flu)
# new_Goldstein_S2_Data$E_P_Over_S_Err<-10^(new_Goldstein_S2_Data$E_P_Over_S_Err)
new_Goldstein_S2_Data$t90<-10^(new_Goldstein_S2_Data$t90)
# new_Goldstein_S2_Data$t90_err<-10^(new_Goldstein_S2_Data$t90_err)
new_Goldstein_S2_collapsars<-Goldstein_S2_collapsars;
# new_Goldstein_S2_collapsars$Peak_E_over_Flu<-log10(new_Goldstein_S2_collapsars$Peak_E_over_Flu)
# new_Goldstein_S2_collapsars$E_P_Over_S_Err<-log10(new_Goldstein_S2_collapsars$E_P_Over_S_Err)
# new_Goldstein_S2_collapsars$t90<-log10(new_Goldstein_S2_collapsars$t90)
# new_Goldstein_S2_collapsars$t90_err<-log10(new_Goldstein_S2_collapsars$t90_err)
colnames(Goldstein_S2_mergers)<-c("Name", "Peak_E_over_Flu", "E_P_Over_S_Err", "`Hardness Ratio`", "t90", "t90_err")
new_Goldstein_S2_mergers<-Goldstein_S2_mergers;
# new_Goldstein_S2_mergers$Peak_E_over_Flu<-log10(new_Goldstein_S2_mergers$Peak_E_over_Flu)
# new_Goldstein_S2_mergers$E_P_Over_S_Err<-log10(new_Goldstein_S2_mergers$E_P_Over_S_Err)
# new_Goldstein_S2_mergers$t90<-log10(new_Goldstein_S2_mergers$t90)
# new_Goldstein_S2_mergers$t90_err<-log10(new_Goldstein_S2_mergers$t90_err)
ggplot(new_Goldstein_S2_Data[unknown_remover, ], aes(x = t90, y = Peak_E_over_Flu, colour = attr(predicted_svm, "probabilities")[,1])) +geom_point(size = 1)+ylab(expression(E[p]/S[prompt]~' 10kev-10MeV ('~keV ~ cm^{2} ~ erg^{-1} ~ ', GBM)'))+xlab('t90 (s, GBM)')+scale_colour_gradient2(low = "grey",mid =muted("blue"), high = "black",  midpoint = 0.5, name="Inferred Collapsar\n Probability")+geom_point(data = new_Goldstein_S2_mergers, color = "red")+geom_point(data = new_Goldstein_S2_collapsars, color = "cyan")+scale_y_log10(labels = trans_format("log10", math_format(10^.x)))+scale_x_log10(labels = trans_format("log10", math_format(10^.x)))
plot(NULL ,xaxt='n',yaxt='n',bty='n',ylab='',xlab='', xlim=0:1, ylim=0:1)
legend("topleft", title='Known Burst Types', legend = c('Detected Collapsar', 'Detected Merger'), col = c( 'cyan', 'red'),  pch = c(20, 20))
write.svm(svmfit, svm.file = "E_p_over_S-t90-classifier.svm", scale.file = "E_p_over_S-t90-classifier.scale")
# plot(new_Goldstein_S2_Data[unknown_remover, ]$Peak_E_over_Flu~new_Goldstein_S2_Data[unknown_remover, ]$t90, ylab=expression(E[p]/S[prompt]~' 10kev-10MeV ('~erg ~ cm^{2} ~ erg^{-1} ~ ', GBM)'), xlab='t90 (s, GBM)', col=attr(predicted_svm, "probabilities")[,1], pch=20)
# points(log10(Goldstein_S2_mergers$t90), log10(Goldstein_S2_mergers$`Peak E. over Flue.`), pch=4, col='#09622A')
# points(log10(Goldstein_S2_collapsars$t90), log10(Goldstein_S2_collapsars$`Peak E. over Flue.`), pch=8, col='blue')
# legend("bottomleft",
#        legend = c('Sorted Collapsars', 'Sorted Mergers', "Detected Mergers", 'Detected Collapsars'),
#        col = c('black', 'grey', 'red', 'cyan'),
#        pch = c(20, 20, 20, 20))
###
Goldstein_Sample_3_Data <- read_excel(file.path(path, "Goldstein_Sample_3_Data.xlsx"), col_types = c("skip", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
missing<-which(!complete.cases(Goldstein_Sample_3_Data))
no_NA_Goldstein_S3_Data<- Goldstein_Sample_3_Data[-missing, ]
collapsar_mask<-no_NA_Goldstein_S3_Data$Name %in% Collapsars
merger_mask<-no_NA_Goldstein_S3_Data$Name %in% Mergers
Classification<-rep("Unknown", nrow(no_NA_Goldstein_S3_Data))
Classification[collapsar_mask]<-"collapsar"
Classification[merger_mask]<-"merger"
no_NA_Goldstein_S3_Data<-data.frame(cbind(no_NA_Goldstein_S3_Data$Name, log10(no_NA_Goldstein_S3_Data$`Peak E. over Flue.`), log10(no_NA_Goldstein_S3_Data$E_P_Over_S_Err), log10(no_NA_Goldstein_S3_Data$`Hardness Ratio`), log10(no_NA_Goldstein_S3_Data$t90), log10(no_NA_Goldstein_S3_Data$t90_err), log10(no_NA_Goldstein_S3_Data$Peak_E), log10(no_NA_Goldstein_S3_Data$Peak_E_err), log10(no_NA_Goldstein_S3_Data$Fluence), log10(no_NA_Goldstein_S3_Data$Fluence_Err), log10(no_NA_Goldstein_S3_Data$AG_fluence), log10(no_NA_Goldstein_S3_Data$AG_fluence_err), as.factor(Classification)))
colnames(no_NA_Goldstein_S3_Data)<-c("Name", "Peak_E_over_Flu", "E_P_Over_S_Err", "Hardness Ratio", "t90", "t90_err", "Peak_E", "Peak_E_err", "Fluence", "Fluence_Err", "AG_fluence", "AG_fluence_err", "as.factor.Classification.")
# new_Goldstein_S3_Data <- no_NA_Goldstein_S3_Data[apply(no_NA_Goldstein_S3_Data> -19, 1, all),]
# temp_Goldstein_S3_Data<-data.frame(cbind(new_Goldstein_S3_Data$Name, new_Goldstein_S3_Data$`Peak E. over Flue.`, new_Goldstein_S3_Data$t90,new_Goldstein_S3_Data$Peak_E, new_Goldstein_S3_Data$Fluence, new_Goldstein_S3_Data$AG_fluence, new_Goldstein_S3_Data$as.factor.Classification.))
# colnames(temp_Goldstein_S3_Data)<-c("Name", "Peak_E_over_Flu", "t90",  "Peak_E", "Fluence", "AG_fluence", "Classification.")
write.csv(no_NA_Goldstein_S3_Data, file.path(path, "Goldstein_AG_Full_DataSet_W_Name.csv"))
#now let's try it on the overlapping sample with redshifts
Goldstein_S6_Data <- read_excel(file.path(path, "Goldstein_Sample_6_Data.xlsx"), col_types = c("skip", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
missing<-which(!complete.cases(Goldstein_S6_Data))
no_NA_Goldstein_S6_Data<- Goldstein_S6_Data[-missing, ]
collapsar_mask<-no_NA_Goldstein_S6_Data$Name %in% Collapsars
merger_mask<-no_NA_Goldstein_S6_Data$Name %in% Mergers
Classification<-rep("Unknown", nrow(no_NA_Goldstein_S6_Data))
Classification[collapsar_mask]<-"collapsar"
Classification[merger_mask]<-"merger"
temp_Goldstein_S6_Data<-data.frame(cbind(no_NA_Goldstein_S6_Data$Name, log10(no_NA_Goldstein_S6_Data$`Peak E. over Flue.`),  log10(no_NA_Goldstein_S6_Data$E_P_Over_S_Err), log10(no_NA_Goldstein_S6_Data$t90), log10(no_NA_Goldstein_S6_Data$t90_err), log10(no_NA_Goldstein_S6_Data$Peak_E), log10(no_NA_Goldstein_S6_Data$Peak_E_Err), log10(no_NA_Goldstein_S6_Data$Fluence), log10(no_NA_Goldstein_S6_Data$Fluence_Err), Classification, no_NA_Goldstein_S6_Data$Redshift))
colnames(temp_Goldstein_S6_Data)<-c("Name", "Peak_E_over_Flu", "E_P_Over_S_Err", "t90", "t90_err", "Peak_E", "Peak_E_Err", "Fluence", "Fluence_Err", "Classification.", "Redshift")
write.csv(temp_Goldstein_S6_Data, file.path(path, "Goldstein_Redshift_AG_Full_DataSet_W_Name.csv"))
# new_Goldstein_S6_Data<-data.frame(cbind(log10(no_NA_Goldstein_S6_Data$`Peak E. over Flue.`), log10(no_NA_Goldstein_S6_Data$t90), as.factor(Classification)))
# colnames(new_Goldstein_S6_Data)<-c("Peak_E_over_Flu", "t90", "as.factor.Classification.")
# unknown_remover<-which(new_Goldstein_S6_Data$as.factor.Classification.==3)
# Second_predicted_svm<-predict(svmfit, new_Goldstein_S6_Data)
# plot(new_Goldstein_S6_Data$Peak_E_over_Flu~new_Goldstein_S6_Data$t90, ylab=expression(E[p]/S[prompt]~' 10kev-10MeV ('~erg ~ cm^{2} ~ erg^{-1} ~ ', GBM)'), xlab='t90 (s, GBM)', col=Second_predicted_svm, pch=20)
# svm_check=predict(svmfit, new_Goldstein_S6_Data[-unknown_remover, ])
# confusionMatrix(svm_check, factor(new_Goldstein_S6_Data[-unknown_remover, ]$as.factor.Classification.), dnn = c("Prediction", "Reference"))
Goldstein_S2_Data <- read_excel(file.path(path, "Goldstein_Sample_2_Data.xlsx"), col_types = c("skip", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")) [-c(3), ]
#don't import stuff we won't need right now
par(mar=c(5,5,5,5))
collapsar_mask=Goldstein_S2_Data$Name %in% Collapsars
merger_mask=Goldstein_S2_Data$Name %in% Mergers
Goldstein_S2_collapsars=Goldstein_S2_Data[collapsar_mask, ]
Goldstein_S2_mergers=Goldstein_S2_Data[merger_mask, ]
Goldstein_S2_unknown=Goldstein_S2_Data[!c(collapsar_mask+merger_mask), ]
long_mask=which(Goldstein_S2_unknown$t90>4.2)
short_mask=which(Goldstein_S2_unknown$t90<=4.2)
Goldstein_S2_Long=Goldstein_S2_unknown[long_mask, ]
Goldstein_S2_Short=Goldstein_S2_unknown[short_mask, ]
# plot(Goldstein_S2_Long$t90, Goldstein_S2_Long$`Peak E. over Flue.`, pch=20, ylab=expression(E[p]/S[prompt]~' 10kev-10MeV ('~erg ~ cm^{2} ~ erg^{-1} ~ ', GBM)'), xlab='t90 (s, GBM)', log="xy", xlim=c(1e-2, 1e3))
# points(Goldstein_S2_Short$t90, Goldstein_S2_Short$`Peak E. over Flue.`, pch=20, col='grey')
# points(Goldstein_S2_mergers$t90, Goldstein_S2_mergers$`Peak E. over Flue.`, pch=4, col='red')
# points(Goldstein_S2_collapsars$t90, Goldstein_S2_collapsars$`Peak E. over Flue.`, pch=8, col='blue')
# legend("topleft",
#        legend = c('Unknown Long', 'Unknown Short', "Mergers", 'Collapsars'),
#        col = c('black', 'grey', 'red', 'blue'),
#        pch = c(20, 20, 4, 8))
ggplot(Goldstein_S2_Long, aes(x = t90, y = `Peak E. over Flue.`, colour = runif(1, 0, 1)))+geom_point(size = 1)+ylab(expression(E[p]/S[prompt]~' 10kev-10MeV ('~keV ~ cm^{2} ~ erg^{-1} ~ ', GBM)'))+xlab('t90 (s, GBM)')+geom_point(data = Goldstein_S2_Short, color = "grey")+scale_colour_gradient2(low = "black",mid ="black", high = "black",  midpoint = 0.5, name="Burst Types")+geom_point(data = Goldstein_S2_mergers, pch=4, color = "red")+geom_point(data = Goldstein_S2_collapsars, pch=8, color ='blue')+scale_y_log10(labels = trans_format("log10", math_format(10^.x)))+scale_x_log10(labels = trans_format("log10", math_format(10^.x)))
plot(NULL ,xaxt='n',yaxt='n',bty='n',ylab='',xlab='', xlim=0:1, ylim=0:1)
legend("topleft", title='Burst Types', legend = c('Unknown Long', 'Unknown Short', "Mergers", 'Collapsars'), col = c('black', 'grey', 'red', 'blue'), pch = c(20, 20, 4, 8))
##
missing<-which(!complete.cases(Goldstein_S2_Data))
no_NA_Goldstein_S2_Data<- Goldstein_S2_Data[-missing, ]
collapsar_mask<-no_NA_Goldstein_S2_Data$Name %in% Collapsars
merger_mask<-no_NA_Goldstein_S2_Data$Name %in% Mergers
# short_list<-which(no_NA_Goldstein_S2_Data$t90<4.2)
# long_list<-which(no_NA_Goldstein_S2_Data$t90>4.2)
Classification<-rep("Unknown", nrow(no_NA_Goldstein_S2_Data))
# Classification[short_list]<-"merger"
# Classification[long_list]<-"collapsar"
Classification[collapsar_mask]<-"collapsar"
Classification[merger_mask]<-"merger"
temp_Goldstein_S2_Data<-data.frame(cbind(no_NA_Goldstein_S2_Data$Name, log10(no_NA_Goldstein_S2_Data$`Peak E. over Flue.`), log10(no_NA_Goldstein_S2_Data$E_P_Over_S_Err), log10(no_NA_Goldstein_S2_Data$t90), log10(no_NA_Goldstein_S2_Data$t90_err), log10(no_NA_Goldstein_S2_Data$Peak_E), log10(no_NA_Goldstein_S2_Data$Peak_E_Err), log10(no_NA_Goldstein_S2_Data$Fluence), log10(no_NA_Goldstein_S2_Data$Fluence_Err), Classification))
colnames(temp_Goldstein_S2_Data)<-c("Name", "Peak_E_over_Flu", "E_P_Over_S_Err", "t90", "t90_err", "Peak_E", "Peak_E_Err", "Fluence", "Fluence_Err", "Classification.")
write.csv(temp_Goldstein_S2_Data, file.path(path, "Goldstein_Full_DataSet_W_Name.csv"))
new_Goldstein_S2_Data<-data.frame(cbind(log10(no_NA_Goldstein_S2_Data$`Peak E. over Flue.`), log10(no_NA_Goldstein_S2_Data$t90), as.factor(Classification)))
colnames(new_Goldstein_S2_Data)<-c("Peak_E_over_Flu", "t90", "as.factor.Classification.")
# model <- randomForest(formula = no_NA_H_2b_Data$Classification ~ ., data = no_NA_H_2b_Data)
unknown_remover<-which(new_Goldstein_S2_Data$as.factor.Classification.==3)
merger_mask<-which(new_Goldstein_S2_Data$as.factor.Classification.==2)
collapsar_mask<-which(new_Goldstein_S2_Data$as.factor.Classification.==1)
training_set=new_Goldstein_S2_Data[-unknown_remover, ]
svmfit<-svm(training_set$as.factor.Classification. ~ ., data = training_set, type = "C-classification", cost = 1.0, kernel = "sigmoid", probability=TRUE)
training_set_2<-data.frame(training_set)
colnames(training_set_2)<-c("Peak_E_over_Flu", "t90", "Classification.")
write.csv(training_set_2, file.path(path, "Goldstein_Training_Set.csv"))
print(svmfit)
plot(svmfit, training_set, Peak_E_over_Flu~t90, ylab=expression(E[p]/S[prompt]~' 10kev-10MeV ('~erg ~ cm^{2} ~ erg^{-1} ~ ', GBM)'), xlab='t90 (s, GBM)', log="xy")
# points(log10(Goldstein_S2_unknown$t90), log10(Goldstein_S2_unknown$`Peak E. over Flue.`))
predicted_svm<-predict(svmfit, new_Goldstein_S2_Data[unknown_remover, ], probability=TRUE)
new_table<-attr(predicted_svm, "probabilities")
new_table<-cbind(no_NA_Goldstein_S2_Data$Name, no_NA_Goldstein_S2_Data$t90, no_NA_Goldstein_S2_Data$`Peak E. over Flue.`, new_table)
colnames(new_table)<-c("Name", "t90", "E_P_Over_S", "P_collapsar", "P_merger")
new_table<-data.frame(new_table)
write.csv(new_table, file.path(path, "Goldstein_Classification.csv"))
colnames(Goldstein_S2_collapsars)<-c("Name", "Peak_E_over_Flu", "E_P_Over_S_Err", "`Hardness Ratio`", "t90", "t90_err")
new_Goldstein_S2_Data<-new_Goldstein_S2_Data;
new_Goldstein_S2_Data$Peak_E_over_Flu<-10^(new_Goldstein_S2_Data$Peak_E_over_Flu)
# new_Goldstein_S2_Data$E_P_Over_S_Err<-10^(new_Goldstein_S2_Data$E_P_Over_S_Err)
new_Goldstein_S2_Data$t90<-10^(new_Goldstein_S2_Data$t90)
# new_Goldstein_S2_Data$t90_err<-10^(new_Goldstein_S2_Data$t90_err)
new_Goldstein_S2_collapsars<-Goldstein_S2_collapsars;
# new_Goldstein_S2_collapsars$Peak_E_over_Flu<-log10(new_Goldstein_S2_collapsars$Peak_E_over_Flu)
# new_Goldstein_S2_collapsars$E_P_Over_S_Err<-log10(new_Goldstein_S2_collapsars$E_P_Over_S_Err)
# new_Goldstein_S2_collapsars$t90<-log10(new_Goldstein_S2_collapsars$t90)
# new_Goldstein_S2_collapsars$t90_err<-log10(new_Goldstein_S2_collapsars$t90_err)
colnames(Goldstein_S2_mergers)<-c("Name", "Peak_E_over_Flu", "E_P_Over_S_Err", "`Hardness Ratio`", "t90", "t90_err")
new_Goldstein_S2_mergers<-Goldstein_S2_mergers;
# new_Goldstein_S2_mergers$Peak_E_over_Flu<-log10(new_Goldstein_S2_mergers$Peak_E_over_Flu)
# new_Goldstein_S2_mergers$E_P_Over_S_Err<-log10(new_Goldstein_S2_mergers$E_P_Over_S_Err)
# new_Goldstein_S2_mergers$t90<-log10(new_Goldstein_S2_mergers$t90)
# new_Goldstein_S2_mergers$t90_err<-log10(new_Goldstein_S2_mergers$t90_err)
ggplot(new_Goldstein_S2_Data[unknown_remover, ], aes(x = t90, y = Peak_E_over_Flu, colour = attr(predicted_svm, "probabilities")[,1])) +geom_point(size = 1)+ylab(expression(E[p]/S[prompt]~' 10kev-10MeV ('~keV ~ cm^{2} ~ erg^{-1} ~ ', GBM)'))+xlab('t90 (s, GBM)')+scale_colour_gradient2(low = "grey",mid =muted("blue"), high = "black",  midpoint = 0.5, name="Inferred Collapsar\n Probability")+geom_point(data = new_Goldstein_S2_mergers, color = "red")+geom_point(data = new_Goldstein_S2_collapsars, color = "cyan")+scale_y_log10(labels = trans_format("log10", math_format(10^.x)))+scale_x_log10(labels = trans_format("log10", math_format(10^.x)))
plot(NULL ,xaxt='n',yaxt='n',bty='n',ylab='',xlab='', xlim=0:1, ylim=0:1)
legend("topleft", title='Known Burst Types', legend = c('Detected Collapsar', 'Detected Merger'), col = c( 'cyan', 'red'),  pch = c(20, 20))
write.svm(svmfit, svm.file = "E_p_over_S-t90-classifier.svm", scale.file = "E_p_over_S-t90-classifier.scale")
# plot(new_Goldstein_S2_Data[unknown_remover, ]$Peak_E_over_Flu~new_Goldstein_S2_Data[unknown_remover, ]$t90, ylab=expression(E[p]/S[prompt]~' 10kev-10MeV ('~erg ~ cm^{2} ~ erg^{-1} ~ ', GBM)'), xlab='t90 (s, GBM)', col=attr(predicted_svm, "probabilities")[,1], pch=20)
# points(log10(Goldstein_S2_mergers$t90), log10(Goldstein_S2_mergers$`Peak E. over Flue.`), pch=4, col='#09622A')
# points(log10(Goldstein_S2_collapsars$t90), log10(Goldstein_S2_collapsars$`Peak E. over Flue.`), pch=8, col='blue')
# legend("bottomleft",
#        legend = c('Sorted Collapsars', 'Sorted Mergers', "Detected Mergers", 'Detected Collapsars'),
#        col = c('black', 'grey', 'red', 'cyan'),
#        pch = c(20, 20, 20, 20))
###
Goldstein_Sample_3_Data <- read_excel(file.path(path, "Goldstein_Sample_3_Data.xlsx"), col_types = c("skip", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
missing<-which(!complete.cases(Goldstein_Sample_3_Data))
no_NA_Goldstein_S3_Data<- Goldstein_Sample_3_Data[-missing, ]
collapsar_mask<-no_NA_Goldstein_S3_Data$Name %in% Collapsars
merger_mask<-no_NA_Goldstein_S3_Data$Name %in% Mergers
Classification<-rep("Unknown", nrow(no_NA_Goldstein_S3_Data))
Classification[collapsar_mask]<-"collapsar"
Classification[merger_mask]<-"merger"
no_NA_Goldstein_S3_Data<-data.frame(cbind(no_NA_Goldstein_S3_Data$Name, log10(no_NA_Goldstein_S3_Data$`Peak E. over Flue.`), log10(no_NA_Goldstein_S3_Data$E_P_Over_S_Err), log10(no_NA_Goldstein_S3_Data$`Hardness Ratio`), log10(no_NA_Goldstein_S3_Data$t90), log10(no_NA_Goldstein_S3_Data$t90_err), log10(no_NA_Goldstein_S3_Data$Peak_E), log10(no_NA_Goldstein_S3_Data$Peak_E_err), log10(no_NA_Goldstein_S3_Data$Fluence), log10(no_NA_Goldstein_S3_Data$Fluence_Err), log10(no_NA_Goldstein_S3_Data$AG_fluence), log10(no_NA_Goldstein_S3_Data$AG_fluence_err), as.factor(Classification)))
colnames(no_NA_Goldstein_S3_Data)<-c("Name", "Peak_E_over_Flu", "E_P_Over_S_Err", "Hardness Ratio", "t90", "t90_err", "Peak_E", "Peak_E_err", "Fluence", "Fluence_Err", "AG_fluence", "AG_fluence_err", "as.factor.Classification.")
# new_Goldstein_S3_Data <- no_NA_Goldstein_S3_Data[apply(no_NA_Goldstein_S3_Data> -19, 1, all),]
# temp_Goldstein_S3_Data<-data.frame(cbind(new_Goldstein_S3_Data$Name, new_Goldstein_S3_Data$`Peak E. over Flue.`, new_Goldstein_S3_Data$t90,new_Goldstein_S3_Data$Peak_E, new_Goldstein_S3_Data$Fluence, new_Goldstein_S3_Data$AG_fluence, new_Goldstein_S3_Data$as.factor.Classification.))
# colnames(temp_Goldstein_S3_Data)<-c("Name", "Peak_E_over_Flu", "t90",  "Peak_E", "Fluence", "AG_fluence", "Classification.")
write.csv(no_NA_Goldstein_S3_Data, file.path(path, "Goldstein_AG_Full_DataSet_W_Name.csv"))
#now let's try it on the overlapping sample with redshifts
Goldstein_S6_Data <- read_excel(file.path(path, "Goldstein_Sample_6_Data.xlsx"), col_types = c("skip", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
missing<-which(!complete.cases(Goldstein_S6_Data))
no_NA_Goldstein_S6_Data<- Goldstein_S6_Data[-missing, ]
collapsar_mask<-no_NA_Goldstein_S6_Data$Name %in% Collapsars
merger_mask<-no_NA_Goldstein_S6_Data$Name %in% Mergers
Classification<-rep("Unknown", nrow(no_NA_Goldstein_S6_Data))
Classification[collapsar_mask]<-"collapsar"
Classification[merger_mask]<-"merger"
temp_Goldstein_S6_Data<-data.frame(cbind(no_NA_Goldstein_S6_Data$Name, log10(no_NA_Goldstein_S6_Data$`Peak E. over Flue.`),  log10(no_NA_Goldstein_S6_Data$E_P_Over_S_Err), log10(no_NA_Goldstein_S6_Data$t90), log10(no_NA_Goldstein_S6_Data$t90_err), log10(no_NA_Goldstein_S6_Data$Peak_E), log10(no_NA_Goldstein_S6_Data$Peak_E_Err), log10(no_NA_Goldstein_S6_Data$Fluence), log10(no_NA_Goldstein_S6_Data$Fluence_Err), Classification, no_NA_Goldstein_S6_Data$Redshift))
colnames(temp_Goldstein_S6_Data)<-c("Name", "Peak_E_over_Flu", "E_P_Over_S_Err", "t90", "t90_err", "Peak_E", "Peak_E_Err", "Fluence", "Fluence_Err", "Classification.", "Redshift")
write.csv(temp_Goldstein_S6_Data, file.path(path, "Goldstein_Redshift_AG_Full_DataSet_W_Name.csv"))
# new_Goldstein_S6_Data<-data.frame(cbind(log10(no_NA_Goldstein_S6_Data$`Peak E. over Flue.`), log10(no_NA_Goldstein_S6_Data$t90), as.factor(Classification)))
# colnames(new_Goldstein_S6_Data)<-c("Peak_E_over_Flu", "t90", "as.factor.Classification.")
# unknown_remover<-which(new_Goldstein_S6_Data$as.factor.Classification.==3)
# Second_predicted_svm<-predict(svmfit, new_Goldstein_S6_Data)
# plot(new_Goldstein_S6_Data$Peak_E_over_Flu~new_Goldstein_S6_Data$t90, ylab=expression(E[p]/S[prompt]~' 10kev-10MeV ('~erg ~ cm^{2} ~ erg^{-1} ~ ', GBM)'), xlab='t90 (s, GBM)', col=Second_predicted_svm, pch=20)
# svm_check=predict(svmfit, new_Goldstein_S6_Data[-unknown_remover, ])
# confusionMatrix(svm_check, factor(new_Goldstein_S6_Data[-unknown_remover, ]$as.factor.Classification.), dnn = c("Prediction", "Reference"))
Goldstein_S2_Data <- read_excel(file.path(path, "Goldstein_Sample_2_Data.xlsx"), col_types = c("skip", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")) [-c(3), ]
#don't import stuff we won't need right now
par(mar=c(5,5,5,5))
collapsar_mask=Goldstein_S2_Data$Name %in% Collapsars
merger_mask=Goldstein_S2_Data$Name %in% Mergers
Goldstein_S2_collapsars=Goldstein_S2_Data[collapsar_mask, ]
Goldstein_S2_mergers=Goldstein_S2_Data[merger_mask, ]
Goldstein_S2_unknown=Goldstein_S2_Data[!c(collapsar_mask+merger_mask), ]
long_mask=which(Goldstein_S2_unknown$t90>4.2)
short_mask=which(Goldstein_S2_unknown$t90<=4.2)
Goldstein_S2_Long=Goldstein_S2_unknown[long_mask, ]
Goldstein_S2_Short=Goldstein_S2_unknown[short_mask, ]
# plot(Goldstein_S2_Long$t90, Goldstein_S2_Long$`Peak E. over Flue.`, pch=20, ylab=expression(E[p]/S[prompt]~' 10kev-10MeV ('~erg ~ cm^{2} ~ erg^{-1} ~ ', GBM)'), xlab='t90 (s, GBM)', log="xy", xlim=c(1e-2, 1e3))
# points(Goldstein_S2_Short$t90, Goldstein_S2_Short$`Peak E. over Flue.`, pch=20, col='grey')
# points(Goldstein_S2_mergers$t90, Goldstein_S2_mergers$`Peak E. over Flue.`, pch=4, col='red')
# points(Goldstein_S2_collapsars$t90, Goldstein_S2_collapsars$`Peak E. over Flue.`, pch=8, col='blue')
# legend("topleft",
#        legend = c('Unknown Long', 'Unknown Short', "Mergers", 'Collapsars'),
#        col = c('black', 'grey', 'red', 'blue'),
#        pch = c(20, 20, 4, 8))
ggplot(Goldstein_S2_Long, aes(x = t90, y = `Peak E. over Flue.`, colour = runif(1, 0, 1)))+geom_point(size = 1)+ylab(expression(E[p]/S[prompt]~' 10kev-10MeV ('~keV ~ cm^{2} ~ erg^{-1} ~ ', GBM)'))+xlab('t90 (s, GBM)')+geom_point(data = Goldstein_S2_Short, color = "grey")+scale_colour_gradient2(low = "black",mid ="black", high = "black",  midpoint = 0.5, name="Burst Types")+geom_point(data = Goldstein_S2_mergers, pch=4, color = "red")+geom_point(data = Goldstein_S2_collapsars, pch=8, color ='blue')+scale_y_log10(labels = trans_format("log10", math_format(10^.x)))+scale_x_log10(labels = trans_format("log10", math_format(10^.x)))
plot(NULL ,xaxt='n',yaxt='n',bty='n',ylab='',xlab='', xlim=0:1, ylim=0:1)
legend("topleft", title='Burst Types', legend = c('Unknown Long', 'Unknown Short', "Mergers", 'Collapsars'), col = c('black', 'grey', 'red', 'blue'), pch = c(20, 20, 4, 8))
##
missing<-which(!complete.cases(Goldstein_S2_Data))
no_NA_Goldstein_S2_Data<- Goldstein_S2_Data[-missing, ]
collapsar_mask<-no_NA_Goldstein_S2_Data$Name %in% Collapsars
merger_mask<-no_NA_Goldstein_S2_Data$Name %in% Mergers
# short_list<-which(no_NA_Goldstein_S2_Data$t90<4.2)
# long_list<-which(no_NA_Goldstein_S2_Data$t90>4.2)
Classification<-rep("Unknown", nrow(no_NA_Goldstein_S2_Data))
# Classification[short_list]<-"merger"
# Classification[long_list]<-"collapsar"
Classification[collapsar_mask]<-"collapsar"
Classification[merger_mask]<-"merger"
temp_Goldstein_S2_Data<-data.frame(cbind(no_NA_Goldstein_S2_Data$Name, log10(no_NA_Goldstein_S2_Data$`Peak E. over Flue.`), log10(no_NA_Goldstein_S2_Data$E_P_Over_S_Err), log10(no_NA_Goldstein_S2_Data$t90), log10(no_NA_Goldstein_S2_Data$t90_err), log10(no_NA_Goldstein_S2_Data$Peak_E), log10(no_NA_Goldstein_S2_Data$Peak_E_Err), log10(no_NA_Goldstein_S2_Data$Fluence), log10(no_NA_Goldstein_S2_Data$Fluence_Err), Classification))
colnames(temp_Goldstein_S2_Data)<-c("Name", "Peak_E_over_Flu", "E_P_Over_S_Err", "t90", "t90_err", "Peak_E", "Peak_E_Err", "Fluence", "Fluence_Err", "Classification.")
write.csv(temp_Goldstein_S2_Data, file.path(path, "Goldstein_Full_DataSet_W_Name.csv"))
new_Goldstein_S2_Data<-data.frame(cbind(log10(no_NA_Goldstein_S2_Data$`Peak E. over Flue.`), log10(no_NA_Goldstein_S2_Data$t90), as.factor(Classification)))
colnames(new_Goldstein_S2_Data)<-c("Peak_E_over_Flu", "t90", "as.factor.Classification.")
# model <- randomForest(formula = no_NA_H_2b_Data$Classification ~ ., data = no_NA_H_2b_Data)
unknown_remover<-which(new_Goldstein_S2_Data$as.factor.Classification.==3)
merger_mask<-which(new_Goldstein_S2_Data$as.factor.Classification.==2)
collapsar_mask<-which(new_Goldstein_S2_Data$as.factor.Classification.==1)
training_set=new_Goldstein_S2_Data[-unknown_remover, ]
svmfit<-svm(training_set$as.factor.Classification. ~ ., data = training_set, type = "C-classification", cost = 1.0, kernel = "sigmoid", probability=TRUE)
training_set_2<-data.frame(training_set)
colnames(training_set_2)<-c("Peak_E_over_Flu", "t90", "Classification.")
write.csv(training_set_2, file.path(path, "Goldstein_Training_Set.csv"))
print(svmfit)
plot(svmfit, training_set, Peak_E_over_Flu~t90, ylab=expression(E[p]/S[prompt]~' 10kev-10MeV ('~erg ~ cm^{2} ~ erg^{-1} ~ ', GBM)'), xlab='t90 (s, GBM)', log="xy")
# points(log10(Goldstein_S2_unknown$t90), log10(Goldstein_S2_unknown$`Peak E. over Flue.`))
predicted_svm<-predict(svmfit, new_Goldstein_S2_Data[unknown_remover, ], probability=TRUE)
new_table<-attr(predicted_svm, "probabilities")
new_table<-cbind(no_NA_Goldstein_S2_Data$Name, no_NA_Goldstein_S2_Data$t90, no_NA_Goldstein_S2_Data$`Peak E. over Flue.`, new_table)
colnames(new_table)<-c("Name", "t90", "E_P_Over_S", "P_collapsar", "P_merger")
new_table<-data.frame(new_table)
write.csv(new_table, file.path(path, "Goldstein_Classification.csv"))
colnames(Goldstein_S2_collapsars)<-c("Name", "Peak_E_over_Flu", "E_P_Over_S_Err", "`Hardness Ratio`", "t90", "t90_err")
new_Goldstein_S2_Data<-new_Goldstein_S2_Data;
new_Goldstein_S2_Data$Peak_E_over_Flu<-10^(new_Goldstein_S2_Data$Peak_E_over_Flu)
# new_Goldstein_S2_Data$E_P_Over_S_Err<-10^(new_Goldstein_S2_Data$E_P_Over_S_Err)
new_Goldstein_S2_Data$t90<-10^(new_Goldstein_S2_Data$t90)
# new_Goldstein_S2_Data$t90_err<-10^(new_Goldstein_S2_Data$t90_err)
new_Goldstein_S2_collapsars<-Goldstein_S2_collapsars;
# new_Goldstein_S2_collapsars$Peak_E_over_Flu<-log10(new_Goldstein_S2_collapsars$Peak_E_over_Flu)
# new_Goldstein_S2_collapsars$E_P_Over_S_Err<-log10(new_Goldstein_S2_collapsars$E_P_Over_S_Err)
# new_Goldstein_S2_collapsars$t90<-log10(new_Goldstein_S2_collapsars$t90)
# new_Goldstein_S2_collapsars$t90_err<-log10(new_Goldstein_S2_collapsars$t90_err)
colnames(Goldstein_S2_mergers)<-c("Name", "Peak_E_over_Flu", "E_P_Over_S_Err", "`Hardness Ratio`", "t90", "t90_err")
new_Goldstein_S2_mergers<-Goldstein_S2_mergers;
# new_Goldstein_S2_mergers$Peak_E_over_Flu<-log10(new_Goldstein_S2_mergers$Peak_E_over_Flu)
# new_Goldstein_S2_mergers$E_P_Over_S_Err<-log10(new_Goldstein_S2_mergers$E_P_Over_S_Err)
# new_Goldstein_S2_mergers$t90<-log10(new_Goldstein_S2_mergers$t90)
# new_Goldstein_S2_mergers$t90_err<-log10(new_Goldstein_S2_mergers$t90_err)
ggplot(new_Goldstein_S2_Data[unknown_remover, ], aes(x = t90, y = Peak_E_over_Flu, colour = attr(predicted_svm, "probabilities")[,1])) +geom_point(size = 1)+ylab(expression(E[p]/S[prompt]~' 10kev-10MeV ('~keV ~ cm^{2} ~ erg^{-1} ~ ', GBM)'))+xlab('t90 (s, GBM)')+scale_colour_gradient2(low = "grey",mid =muted("blue"), high = "black",  midpoint = 0.5, name="Inferred Collapsar\n Probability")+geom_point(data = new_Goldstein_S2_mergers, color = "red")+geom_point(data = new_Goldstein_S2_collapsars, color = "cyan")+scale_y_log10(labels = trans_format("log10", math_format(10^.x)))+scale_x_log10(labels = trans_format("log10", math_format(10^.x)))
plot(NULL ,xaxt='n',yaxt='n',bty='n',ylab='',xlab='', xlim=0:1, ylim=0:1)
legend("topleft", title='Known Burst Types', legend = c('Detected Collapsar', 'Detected Merger'), col = c( 'cyan', 'red'),  pch = c(20, 20))
write.svm(svmfit, svm.file = "E_p_over_S-t90-classifier.svm", scale.file = "E_p_over_S-t90-classifier.scale")
# plot(new_Goldstein_S2_Data[unknown_remover, ]$Peak_E_over_Flu~new_Goldstein_S2_Data[unknown_remover, ]$t90, ylab=expression(E[p]/S[prompt]~' 10kev-10MeV ('~erg ~ cm^{2} ~ erg^{-1} ~ ', GBM)'), xlab='t90 (s, GBM)', col=attr(predicted_svm, "probabilities")[,1], pch=20)
# points(log10(Goldstein_S2_mergers$t90), log10(Goldstein_S2_mergers$`Peak E. over Flue.`), pch=4, col='#09622A')
# points(log10(Goldstein_S2_collapsars$t90), log10(Goldstein_S2_collapsars$`Peak E. over Flue.`), pch=8, col='blue')
# legend("bottomleft",
#        legend = c('Sorted Collapsars', 'Sorted Mergers', "Detected Mergers", 'Detected Collapsars'),
#        col = c('black', 'grey', 'red', 'cyan'),
#        pch = c(20, 20, 20, 20))
###
Goldstein_Sample_3_Data <- read_excel(file.path(path, "Goldstein_Sample_3_Data.xlsx"), col_types = c("skip", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
missing<-which(!complete.cases(Goldstein_Sample_3_Data))
no_NA_Goldstein_S3_Data<- Goldstein_Sample_3_Data[-missing, ]
collapsar_mask<-no_NA_Goldstein_S3_Data$Name %in% Collapsars
merger_mask<-no_NA_Goldstein_S3_Data$Name %in% Mergers
Classification<-rep("Unknown", nrow(no_NA_Goldstein_S3_Data))
Classification[collapsar_mask]<-"collapsar"
Classification[merger_mask]<-"merger"
no_NA_Goldstein_S3_Data<-data.frame(cbind(no_NA_Goldstein_S3_Data$Name, log10(no_NA_Goldstein_S3_Data$`Peak E. over Flue.`), log10(no_NA_Goldstein_S3_Data$E_P_Over_S_Err), log10(no_NA_Goldstein_S3_Data$`Hardness Ratio`), log10(no_NA_Goldstein_S3_Data$t90), log10(no_NA_Goldstein_S3_Data$t90_err), log10(no_NA_Goldstein_S3_Data$Peak_E), log10(no_NA_Goldstein_S3_Data$Peak_E_err), log10(no_NA_Goldstein_S3_Data$Fluence), log10(no_NA_Goldstein_S3_Data$Fluence_Err), log10(no_NA_Goldstein_S3_Data$AG_fluence), log10(no_NA_Goldstein_S3_Data$AG_fluence_err), as.factor(Classification)))
colnames(no_NA_Goldstein_S3_Data)<-c("Name", "Peak_E_over_Flu", "E_P_Over_S_Err", "Hardness Ratio", "t90", "t90_err", "Peak_E", "Peak_E_err", "Fluence", "Fluence_Err", "AG_fluence", "AG_fluence_err", "Classification.")
# new_Goldstein_S3_Data <- no_NA_Goldstein_S3_Data[apply(no_NA_Goldstein_S3_Data> -19, 1, all),]
# temp_Goldstein_S3_Data<-data.frame(cbind(new_Goldstein_S3_Data$Name, new_Goldstein_S3_Data$`Peak E. over Flue.`, new_Goldstein_S3_Data$t90,new_Goldstein_S3_Data$Peak_E, new_Goldstein_S3_Data$Fluence, new_Goldstein_S3_Data$AG_fluence, new_Goldstein_S3_Data$as.factor.Classification.))
# colnames(temp_Goldstein_S3_Data)<-c("Name", "Peak_E_over_Flu", "t90",  "Peak_E", "Fluence", "AG_fluence", "Classification.")
write.csv(no_NA_Goldstein_S3_Data, file.path(path, "Goldstein_AG_Full_DataSet_W_Name.csv"))
#now let's try it on the overlapping sample with redshifts
Goldstein_S6_Data <- read_excel(file.path(path, "Goldstein_Sample_6_Data.xlsx"), col_types = c("skip", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
missing<-which(!complete.cases(Goldstein_S6_Data))
no_NA_Goldstein_S6_Data<- Goldstein_S6_Data[-missing, ]
collapsar_mask<-no_NA_Goldstein_S6_Data$Name %in% Collapsars
merger_mask<-no_NA_Goldstein_S6_Data$Name %in% Mergers
Classification<-rep("Unknown", nrow(no_NA_Goldstein_S6_Data))
Classification[collapsar_mask]<-"collapsar"
Classification[merger_mask]<-"merger"
temp_Goldstein_S6_Data<-data.frame(cbind(no_NA_Goldstein_S6_Data$Name, log10(no_NA_Goldstein_S6_Data$`Peak E. over Flue.`),  log10(no_NA_Goldstein_S6_Data$E_P_Over_S_Err), log10(no_NA_Goldstein_S6_Data$t90), log10(no_NA_Goldstein_S6_Data$t90_err), log10(no_NA_Goldstein_S6_Data$Peak_E), log10(no_NA_Goldstein_S6_Data$Peak_E_Err), log10(no_NA_Goldstein_S6_Data$Fluence), log10(no_NA_Goldstein_S6_Data$Fluence_Err), Classification, no_NA_Goldstein_S6_Data$Redshift))
colnames(temp_Goldstein_S6_Data)<-c("Name", "Peak_E_over_Flu", "E_P_Over_S_Err", "t90", "t90_err", "Peak_E", "Peak_E_Err", "Fluence", "Fluence_Err", "Classification.", "Redshift")
write.csv(temp_Goldstein_S6_Data, file.path(path, "Goldstein_Redshift_AG_Full_DataSet_W_Name.csv"))
# new_Goldstein_S6_Data<-data.frame(cbind(log10(no_NA_Goldstein_S6_Data$`Peak E. over Flue.`), log10(no_NA_Goldstein_S6_Data$t90), as.factor(Classification)))
# colnames(new_Goldstein_S6_Data)<-c("Peak_E_over_Flu", "t90", "as.factor.Classification.")
# unknown_remover<-which(new_Goldstein_S6_Data$as.factor.Classification.==3)
# Second_predicted_svm<-predict(svmfit, new_Goldstein_S6_Data)
# plot(new_Goldstein_S6_Data$Peak_E_over_Flu~new_Goldstein_S6_Data$t90, ylab=expression(E[p]/S[prompt]~' 10kev-10MeV ('~erg ~ cm^{2} ~ erg^{-1} ~ ', GBM)'), xlab='t90 (s, GBM)', col=Second_predicted_svm, pch=20)
# svm_check=predict(svmfit, new_Goldstein_S6_Data[-unknown_remover, ])
# confusionMatrix(svm_check, factor(new_Goldstein_S6_Data[-unknown_remover, ]$as.factor.Classification.), dnn = c("Prediction", "Reference"))
Gehrels_S3_Data <- read_excel(file.path(path, "Gehrels_Sample_3_Data_edited.xlsx"), col_types = c("skip", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "text"))
Gehrels_S3_Data <- read_excel(file.path(path, "Gehrels_Sample_3_Data_edited.xlsx"), col_types = c("skip", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "text"))
actually_usable_mask <- which(Gehrels_S3_Data$`11-hour present`== "yes")
Gehrels_S3_Data<-Gehrels_S3_Data[c(actually_usable_mask), ]
# Gehrels_S3_Data<-Gehrels_S3_Data[-c(146), ] #removed an outlier from the linear model
# format_csv(transpose(data.frame(which(Gehrels_S3_Data$`X-ray_F11`< 1e-13)[c(3, 4, 6, 7, 8, 9, 10, 11, 12, 15, 17, 18, 19, 20, 22, 23, 24, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39)])))
# Gehrels_S3_Data<-Gehrels_S3_Data[-c(33,43,59,61,71,83,89,91,102,129,138,139,140,146,176,177,178,250,270,283,284,293,305,315,319,321,333), ]
#removed all the fluxes below e-13 that didn't appear to come directly from the data.
collapsar_mask=Gehrels_S3_Data$Name %in% Collapsars
merger_mask=Gehrels_S3_Data$Name %in% Mergers
Gehrels_S3_collapsars=Gehrels_S3_Data[collapsar_mask, ]
Gehrels_S3_mergers=Gehrels_S3_Data[merger_mask, ]
Gehrels_S3_unknown=Gehrels_S3_Data[!c(collapsar_mask+merger_mask), ]
long_mask=which(Gehrels_S3_unknown$t90>4.5)
short_mask=which(Gehrels_S3_unknown$t90<=4.5)
Gehrels_S3_Long=Gehrels_S3_unknown[long_mask, ]
Gehrels_S3_Short=Gehrels_S3_unknown[short_mask, ]
x<-log10(Gehrels_S3_Data$Prompt_Flu)
xerr<-log10(Gehrels_S3_Data$Flu_Err)
y<-log10(Gehrels_S3_Data$`X-ray_F11`)
yerr<-log10(Gehrels_S3_Data$Flux_Err)
z<-log10(Gehrels_S3_Data$t90)
Gehrels_S3_Long<-Gehrels_S3_Long[-c(17, 96, 171), ]
x2<-log10(Gehrels_S3_Long$Prompt_Flu)
xerr2<-log10(Gehrels_S3_Long$Flu_Err)
y2<-log10(Gehrels_S3_Long$`X-ray_F11`)
yerr2<-log10(Gehrels_S3_Long$Flux_Err)
z2<-log10(Gehrels_S3_Long$t90)
x3<-log10(Gehrels_S3_Short$Prompt_Flu)
xerr3<-log10(Gehrels_S3_Short$Flu_Err)
y3<-log10(Gehrels_S3_Short$`X-ray_F11`)
yerr3<-log10(Gehrels_S3_Short$Flux_Err)
z3<-log10(Gehrels_S3_Short$t90)
##
modGehrels<-lm(y~x)
par(mfrow=c(1,1))
plot(modGehrels)
print(anova(modGehrels))
print(summary(modGehrels))
#
modGehrels2<-lm(y~x+z)
par(mfrow=c(2,2))
plot(modGehrels2)
print(anova(modGehrels2))
print(summary(modGehrels2))
#
modGehrels3<-lm(y2~x2)
par(mfrow=c(2,2))
plot(modGehrels3)
print(anova(modGehrels3))
print(summary(modGehrels3))
#
modGehrels4<-lm(y3~x3)
par(mfrow=c(2,2))
plot(modGehrels4)
print(anova(modGehrels4))
print(summary(modGehrels4))
##
newx <- seq(min(x2), max(x2), length.out=100)
preds <- predict(modGehrels3, newdata=data.frame(x2=newx), interval='prediction')
##
newx2 <- seq(min(x3), max(x3), length.out=100)
preds2 <- predict(modGehrels4, newdata=data.frame(x3=newx2), interval='prediction')
##
par(mfrow=c(1,1))
par(mar=c(5,5,5,5))
# plot(Gehrels_S3_unknown$Prompt_Flu, Gehrels_S3_unknown$`X-ray_F11`, pch=20, xlab=expression('Prompt Fluence 10kev-10MeV (erg'~cm^{-2}~', GBM)'), ylab=expression('Afterglow '~Flux[11~Hr.]~' 0.3-10 keV (erg'~cm^{-2}~s^{-1}~', XRT)'), log="xy", xlim = c(1e-7, 1e-3), ylim = c(1e-20, 1e-8))
# points(Gehrels_S3_mergers$Prompt_Flu, Gehrels_S3_mergers$`X-ray_F11`, pch=4, col='red')
# points(Gehrels_S3_collapsars$Prompt_Flu, Gehrels_S3_collapsars$`X-ray_F11`, pch=8, col='blue')
# arrows(Gehrels_S3_unknown$Prompt_Flu, Gehrels_S3_unknown$`X-ray_F11`-Gehrels_S3_unknown$Flux_Err, Gehrels_S3_unknown$Prompt_Flu, Gehrels_S3_unknown$`X-ray_F11`+Gehrels_S3_unknown$Flux_Err, length=0.05, angle=90, code=3)
# arrows(Gehrels_S3_collapsars$Prompt_Flu, Gehrels_S3_collapsars$`X-ray_F11`-Gehrels_S3_collapsars$Flux_Err, Gehrels_S3_collapsars$Prompt_Flu, Gehrels_S3_collapsars$`X-ray_F11`+Gehrels_S3_collapsars$Flux_Err, length=0.05, angle=90, code=3)
# arrows(Gehrels_S3_mergers$Prompt_Flu, Gehrels_S3_mergers$`X-ray_F11`-Gehrels_S3_mergers$Flux_Err, Gehrels_S3_mergers$Prompt_Flu, Gehrels_S3_mergers$`X-ray_F11`+Gehrels_S3_mergers$Flux_Err, length=0.05, angle=90, code=3)
# arrows(Gehrels_S3_unknown$Prompt_Flu-Gehrels_S3_unknown$Flu_Err, Gehrels_S3_unknown$`X-ray_F11`, Gehrels_S3_unknown$Prompt_Flu+Gehrels_S3_unknown$Flu_Err, Gehrels_S3_unknown$`X-ray_F11`, length=0.05, angle=90, code=3)
# arrows(Gehrels_S3_collapsars$Prompt_Flu-Gehrels_S3_collapsars$Flu_Err, Gehrels_S3_collapsars$`X-ray_F11`, Gehrels_S3_collapsars$Prompt_Flu+Gehrels_S3_collapsars$Flu_Err, Gehrels_S3_collapsars$`X-ray_F11`, length=0.05, angle=90, code=3)
# arrows(Gehrels_S3_mergers$Prompt_Flu-Gehrels_S3_mergers$Flu_Err, Gehrels_S3_mergers$`X-ray_F11`, Gehrels_S3_mergers$Prompt_Flu+Gehrels_S3_mergers$Flu_Err, Gehrels_S3_mergers$`X-ray_F11`, length=0.05, angle=90, code=3)
# abline(modGehrels3)
# abline(modGehrels4)
# #add dashed lines for confidence bands
# lines(10^newx, 10^preds[ ,3], lty = 'dashed', col = 'black')
# lines(10^newx, 10^preds[ ,2], lty = 'dashed', col = 'black')
# lines(10^newx2, 10^preds2[ ,3], lty = 'dashed', col = 'grey')
# lines(10^newx2, 10^preds2[ ,2], lty = 'dashed', col = 'grey')
# legend("bottomright",
#        legend = c('Unknown', 'Mergers', 'Collapsars'),
#        col = c('black', 'red', 'blue'),
#        pch = c(20, 4, 8))
ggplot(Gehrels_S3_unknown, aes(x = Prompt_Flu, y = `X-ray_F11`, colour=runif(1, 0, 1)))+scale_colour_gradient2(low = "black",mid ="black", high = "black",  midpoint = 0.5, name="Burst Types")+ylab(expression('Afterglow '~Flux[11~Hr.]~' 0.3-10 keV (erg'~cm^{-2}~s^{-1}~', XRT)'))+xlab(expression('Prompt Fluence 10kev-10MeV (erg'~cm^{-2}~', GBM)'))+geom_point(size = 1)+geom_point(data = Gehrels_S3_mergers, color = "red", pch=4)+geom_point(data = Gehrels_S3_collapsars, color = "blue", pch=8)+scale_y_log10(labels = trans_format("log10", math_format(10^.x)))+scale_x_log10(labels = trans_format("log10", math_format(10^.x)))+geom_pointrange(aes(ymin=`X-ray_F11`-Flux_Err, ymax=`X-ray_F11`-Flux_Err))+geom_pointrange(aes(xmin=Prompt_Flu-Flu_Err, xmax=Prompt_Flu+Flu_Err))+geom_pointrange(data=Gehrels_S3_mergers, aes(ymin=`X-ray_F11`-Flux_Err, ymax=`X-ray_F11`-Flux_Err), color = "red")+geom_pointrange(data=Gehrels_S3_mergers, aes(xmin=Prompt_Flu-Flu_Err, xmax=Prompt_Flu+Flu_Err), color = "red")+geom_pointrange(data=Gehrels_S3_collapsars, aes(ymin=`X-ray_F11`-Flux_Err, ymax=`X-ray_F11`-Flux_Err), color = "blue") +geom_pointrange(data=Gehrels_S3_collapsars, aes(xmin=Prompt_Flu-Flu_Err, xmax=Prompt_Flu+Flu_Err), color = "blue")
plot(NULL ,xaxt='n',yaxt='n',bty='n',ylab='',xlab='', xlim=0:1, ylim=0:1)
legend("bottomright", legend = c('Unknown', 'Mergers', 'Collapsars'), col = c('black', 'red', 'blue'), pch = c(20, 4, 8))
##
# newx <- seq(min(x2), max(x2), length.out=100)
# preds <- predict(modGehrels, newdata=data.frame(x2=newx), interval='prediction')
##
# par(mar=c(5,5,5,5))
# plot(Gehrels_S3_Long$Prompt_Flu, Gehrels_S3_Long$`X-ray_F11`, pch=20, col='black', xlab=expression('Prompt Fluence 10kev-10MeV (erg'~cm^{-2}~', GBM)'), ylab=expression('Afterglow '~Flux[11~Hr.]~' 0.3-10 keV (erg'~cm^{-2}~s^{-1}~', XRT)'), log="xy", xlim = c(1e-7, 1e-3), ylim = c(1e-20, 1e-8))
# points(Gehrels_S3_Short$Prompt_Flu, Gehrels_S3_Short$`X-ray_F11`, pch=20, col='grey')
# points(Gehrels_S3_mergers$Prompt_Flu, Gehrels_S3_mergers$`X-ray_F11`, pch=4, col='red')
# points(Gehrels_S3_collapsars$Prompt_Flu, Gehrels_S3_collapsars$`X-ray_F11`, pch=8, col='blue')
# arrows(Gehrels_S3_Long$Prompt_Flu, Gehrels_S3_Long$`X-ray_F11`-Gehrels_S3_Long$Flux_Err, Gehrels_S3_Long$Prompt_Flu, Gehrels_S3_Long$`X-ray_F11`+Gehrels_S3_Long$Flux_Err, length=0.05, angle=90, code=3, col = 'black')
# arrows(Gehrels_S3_Short$Prompt_Flu, Gehrels_S3_Short$`X-ray_F11`-Gehrels_S3_Short$Flux_Err, Gehrels_S3_Short$Prompt_Flu, Gehrels_S3_Short$`X-ray_F11`+Gehrels_S3_Short$Flux_Err, length=0.05, angle=90, code=3, col = 'grey')
# arrows(Gehrels_S3_collapsars$Prompt_Flu, Gehrels_S3_collapsars$`X-ray_F11`-Gehrels_S3_collapsars$Flux_Err, Gehrels_S3_collapsars$Prompt_Flu, Gehrels_S3_collapsars$`X-ray_F11`+Gehrels_S3_collapsars$Flux_Err, length=0.05, angle=90, code=3, col = 'blue')
# arrows(Gehrels_S3_mergers$Prompt_Flu, Gehrels_S3_mergers$`X-ray_F11`-Gehrels_S3_mergers$Flux_Err, Gehrels_S3_mergers$Prompt_Flu, Gehrels_S3_mergers$`X-ray_F11`+Gehrels_S3_mergers$Flux_Err, length=0.05, angle=90, code=3, col = 'red')
# arrows(Gehrels_S3_Long$Prompt_Flu-Gehrels_S3_Long$Flu_Err, Gehrels_S3_Long$`X-ray_F11`, Gehrels_S3_Long$Prompt_Flu+Gehrels_S3_Long$Flu_Err, Gehrels_S3_Long$`X-ray_F11`, length=0.05, angle=90, code=3, col = 'black')
# arrows(Gehrels_S3_Short$Prompt_Flu-Gehrels_S3_Short$Flu_Err, Gehrels_S3_Short$`X-ray_F11`, Gehrels_S3_Short$Prompt_Flu+Gehrels_S3_Short$Flu_Err, Gehrels_S3_Short$`X-ray_F11`, length=0.05, angle=90, code=3, col = 'grey')
# arrows(Gehrels_S3_collapsars$Prompt_Flu-Gehrels_S3_collapsars$Flu_Err, Gehrels_S3_collapsars$`X-ray_F11`, Gehrels_S3_collapsars$Prompt_Flu+Gehrels_S3_collapsars$Flu_Err, Gehrels_S3_collapsars$`X-ray_F11`, length=0.05, angle=90, code=3, col = 'blue')
# arrows(Gehrels_S3_mergers$Prompt_Flu-Gehrels_S3_mergers$Flu_Err, Gehrels_S3_mergers$`X-ray_F11`, Gehrels_S3_mergers$Prompt_Flu+Gehrels_S3_mergers$Flu_Err, Gehrels_S3_mergers$`X-ray_F11`, length=0.05, angle=90, code=3, col = 'red')
# abline(modGehrels3, col='black')
# abline(modGehrels4, col='grey')
#add dashed lines for confidence bands
# lines(10^newx, 10^preds[ ,3], lty = 'dashed', col = 'black')
# lines(10^newx, 10^preds[ ,2], lty = 'dashed', col = 'black')
# lines(10^newx2, 10^preds2[ ,3], lty = 'dashed', col = 'grey')
# lines(10^newx2, 10^preds2[ ,2], lty = 'dashed', col = 'grey')
# legend("bottomright",
#        legend = c('Unknown Long', "Unknown Short", 'Mergers', 'Collapsars'),
#        col = c('black', 'grey', 'red', 'blue'),
#        pch = c(20, 20, 4, 8))
low_error_data_long=data.frame(cbind(0, 10^newx, 0, 10^preds[ ,2], 0, 0, 0))
colnames(low_error_data_long)<-colnames(Gehrels_S3_Data)
high_error_data_long=data.frame(cbind(0, 10^newx, 0, 10^preds[ ,3], 0, 0, 0))
colnames(high_error_data_long)<-colnames(Gehrels_S3_Data)
low_error_data_short=data.frame(cbind(0, 10^newx2, 0, 10^preds2[ ,2], 0, 0, 0))
colnames(low_error_data_short)<-colnames(Gehrels_S3_Data)
high_error_data_short=data.frame(cbind(0, 10^newx2, 0, 10^preds2[ ,3], 0, 0, 0))
colnames(high_error_data_short)<-colnames(Gehrels_S3_Data)
ggplot(Gehrels_S3_Long, aes(x = Prompt_Flu, y = `X-ray_F11`, colour=runif(1, 0, 1)))+scale_colour_gradient2(low = "black",mid ="black", high = "black",  midpoint = 0.5, name="Burst Types")+geom_errorbar(aes(ymin=`X-ray_F11`-Flux_Err, ymax=`X-ray_F11`+Flux_Err))+geom_errorbarh(aes(xmin=Prompt_Flu-Flu_Err, xmax=Prompt_Flu+Flu_Err))+ylab(expression('Afterglow '~Flux[11~Hr.]~' 0.3-10 keV (erg'~cm^{-2}~s^{-1}~', XRT)'))+xlab(expression('Prompt Fluence 10kev-10MeV (erg'~cm^{-2}~', GBM)'))+geom_point(size = 1)+scale_y_log10(labels = trans_format("log10", math_format(10^.x)))+scale_x_log10(labels = trans_format("log10", math_format(10^.x)))+geom_point(data = high_error_data_long, color = "black", pch=1)+geom_point(data = low_error_data_long, color = "black", pch=1)+geom_point(data = Gehrels_S3_Short, color = "grey")+geom_errorbar(data=Gehrels_S3_Short, aes(ymin=`X-ray_F11`-Flux_Err, ymax=`X-ray_F11`+Flux_Err), color = "grey")+geom_errorbarh(data=Gehrels_S3_Short, aes(xmin=Prompt_Flu-Flu_Err, xmax=Prompt_Flu+Flux_Err), color = "grey", pch=20)+geom_point(data = high_error_data_short, color = "grey", pch=1)+geom_point(data = low_error_data_short, color = "grey", pch=1)+geom_point(data = Gehrels_S3_mergers, color = "red", pch=4)+geom_errorbar(data=Gehrels_S3_mergers, aes(ymin=`X-ray_F11`-Flux_Err, ymax=`X-ray_F11`+Flux_Err), color = "red")+geom_errorbarh(data=Gehrels_S3_mergers, aes(xmin=Prompt_Flu-Flu_Err, xmax=Prompt_Flu+Flu_Err), color = "red")+geom_point(data = Gehrels_S3_collapsars, color = "blue", pch=8)+geom_errorbar(data=Gehrels_S3_collapsars, aes(ymin=`X-ray_F11`-Flux_Err, ymax=`X-ray_F11`+Flux_Err), color = "blue") +geom_errorbarh(data=Gehrels_S3_collapsars, aes(xmin=Prompt_Flu-Flu_Err, xmax=Prompt_Flu+Flu_Err), color = "blue")+geom_abline(intercept=modGehrels3$coefficients[1], slope=modGehrels3$coefficients[2], color='black', linetype="dashed")+geom_abline(intercept=modGehrels4$coefficients[1], slope=modGehrels4$coefficients[2], color='grey', linetype="dashed")
plot(NULL ,xaxt='n',yaxt='n',bty='n',ylab='',xlab='', xlim=0:1, ylim=0:1)
legend("bottomright", legend = c('Unknown Long', 'Unknown Short', 'Mergers', 'Collapsars'), col = c('black', 'grey', 'red', 'blue'), pch = c(20, 20, 4, 8))
10^confint(modGehrels, 'x', level=0.99)
autoplot(modGehrels3,which_plots=1:4)
autoplot(modGehrels4,which_plots=1:4)
